// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "EasyAr/idl"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string ping()")
  fmt.Fprintln(os.Stderr, "  bool TableValueUpdate(string token, string table, string key, string value, i64 keyId, bool checkExists)")
  fmt.Fprintln(os.Stderr, "  bool IsAllowedFreeTry(string token, i8 serviceType, string regionCode)")
  fmt.Fprintln(os.Stderr, "  bool LoginItemIsExists(string key, string value)")
  fmt.Fprintln(os.Stderr, "  i32 SaveUser(string username, string email, string password, string ip, string fromDomain)")
  fmt.Fprintln(os.Stderr, "  bool ActiveUser(string code)")
  fmt.Fprintln(os.Stderr, "  bool UpdatePassword(string token, string oldPassword, string newPassword)")
  fmt.Fprintln(os.Stderr, "   Login(string username, string password, string ip)")
  fmt.Fprintln(os.Stderr, "  bool ForgotPasswordEmailSend(string email, string fromDomain)")
  fmt.Fprintln(os.Stderr, "  bool ForgotPasswordEmailVerify(string code, string password)")
  fmt.Fprintln(os.Stderr, "  bool UserHasRight(string token, i8 serviceId)")
  fmt.Fprintln(os.Stderr, "  bool UserForgotCodeStatus(string token)")
  fmt.Fprintln(os.Stderr, "  bool UserForgotCodeResend(string token, string fromDomain)")
  fmt.Fprintln(os.Stderr, "  bool UserRegisterEmailResend(string code, string fromDomain)")
  fmt.Fprintln(os.Stderr, "  string UserBindedMobile(string token)")
  fmt.Fprintln(os.Stderr, "  bool UserBindMobileSendCode(string token, string mobile, string lang)")
  fmt.Fprintln(os.Stderr, "  bool UserBindMobileUpdate(string token, string mobile, string code)")
  fmt.Fprintln(os.Stderr, "  bool UserBindEmail(string token, string email, string fromDomain)")
  fmt.Fprintln(os.Stderr, "  bool UserApplyService(string token,  params)")
  fmt.Fprintln(os.Stderr, "  bool UserRightCreateAction(string token, i8 serviceType)")
  fmt.Fprintln(os.Stderr, "  bool UserRightOwnedAction(string token, i8 serviceType)")
  fmt.Fprintln(os.Stderr, "  string OrderInfoSave(string token,  params)")
  fmt.Fprintln(os.Stderr, "   OrderInfoForm(string token, string orderId,  params)")
  fmt.Fprintln(os.Stderr, "   OrderInfo(string token, string orderId)")
  fmt.Fprintln(os.Stderr, "  bool OrderInfoBalancePay(string token, string orderId)")
  fmt.Fprintln(os.Stderr, "  bool PayCallbackVerify(i8 payProvider,  params)")
  fmt.Fprintln(os.Stderr, "  AppItemInfo AppInfo(string token, i64 appId)")
  fmt.Fprintln(os.Stderr, "  bool AppDelete(string token, i64 appId)")
  fmt.Fprintln(os.Stderr, "  ItemList AppListV3(string token, i32 page, i32 size, i8 appType)")
  fmt.Fprintln(os.Stderr, "  bool UpgradeToV3(string token, i64 appId)")
  fmt.Fprintln(os.Stderr, "  ResponesReuslt sendRequest(RequestInfo requestInfo)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := idl.NewEasyArIdlClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Ping requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Ping(context.Background()))
    fmt.Print("\n")
    break
  case "TableValueUpdate":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "TableValueUpdate requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4, err100 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err100 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.TableValueUpdate(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "IsAllowedFreeTry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "IsAllowedFreeTry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err103 := (strconv.Atoi(flag.Arg(2)))
    if err103 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.IsAllowedFreeTry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "LoginItemIsExists":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LoginItemIsExists requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LoginItemIsExists(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "SaveUser":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "SaveUser requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.SaveUser(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "ActiveUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ActiveUser requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ActiveUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "UpdatePassword":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdatePassword requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdatePassword(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "Login":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Login requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Login(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "ForgotPasswordEmailSend":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForgotPasswordEmailSend requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ForgotPasswordEmailSend(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "ForgotPasswordEmailVerify":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForgotPasswordEmailVerify requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ForgotPasswordEmailVerify(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserHasRight":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserHasRight requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err124 := (strconv.Atoi(flag.Arg(2)))
    if err124 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.UserHasRight(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserForgotCodeStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UserForgotCodeStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UserForgotCodeStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "UserForgotCodeResend":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserForgotCodeResend requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UserForgotCodeResend(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserRegisterEmailResend":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserRegisterEmailResend requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UserRegisterEmailResend(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserBindedMobile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UserBindedMobile requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UserBindedMobile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "UserBindMobileSendCode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UserBindMobileSendCode requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UserBindMobileSendCode(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "UserBindMobileUpdate":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UserBindMobileUpdate requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UserBindMobileUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "UserBindEmail":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UserBindEmail requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UserBindEmail(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "UserApplyService":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserApplyService requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg141 := flag.Arg(2)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil { 
      Usage()
      return
    }
    factory144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    containerStruct1 := idl.NewEasyArIdlUserApplyServiceArgs()
    err146 := containerStruct1.ReadField2(jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Params
    value1 := argvalue1
    fmt.Print(client.UserApplyService(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserRightCreateAction":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserRightCreateAction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err148 := (strconv.Atoi(flag.Arg(2)))
    if err148 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.UserRightCreateAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "UserRightOwnedAction":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UserRightOwnedAction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err150 := (strconv.Atoi(flag.Arg(2)))
    if err150 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.UserRightOwnedAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "OrderInfoSave":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OrderInfoSave requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg152 := flag.Arg(2)
    mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
    defer mbTrans153.Close()
    _, err154 := mbTrans153.WriteString(arg152)
    if err154 != nil { 
      Usage()
      return
    }
    factory155 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt156 := factory155.GetProtocol(mbTrans153)
    containerStruct1 := idl.NewEasyArIdlOrderInfoSaveArgs()
    err157 := containerStruct1.ReadField2(jsProt156)
    if err157 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Params
    value1 := argvalue1
    fmt.Print(client.OrderInfoSave(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "OrderInfoForm":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "OrderInfoForm requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg160 := flag.Arg(3)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil { 
      Usage()
      return
    }
    factory163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    containerStruct2 := idl.NewEasyArIdlOrderInfoFormArgs()
    err165 := containerStruct2.ReadField3(jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Params
    value2 := argvalue2
    fmt.Print(client.OrderInfoForm(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "OrderInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OrderInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.OrderInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "OrderInfoBalancePay":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OrderInfoBalancePay requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.OrderInfoBalancePay(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "PayCallbackVerify":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PayCallbackVerify requires 2 args")
      flag.Usage()
    }
    tmp0, err170 := (strconv.Atoi(flag.Arg(1)))
    if err170 != nil {
      Usage()
      return
    }
    argvalue0 := int8(tmp0)
    value0 := argvalue0
    arg171 := flag.Arg(2)
    mbTrans172 := thrift.NewTMemoryBufferLen(len(arg171))
    defer mbTrans172.Close()
    _, err173 := mbTrans172.WriteString(arg171)
    if err173 != nil { 
      Usage()
      return
    }
    factory174 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt175 := factory174.GetProtocol(mbTrans172)
    containerStruct1 := idl.NewEasyArIdlPayCallbackVerifyArgs()
    err176 := containerStruct1.ReadField2(jsProt175)
    if err176 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Params
    value1 := argvalue1
    fmt.Print(client.PayCallbackVerify(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "AppInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AppInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err178 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err178 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AppInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "AppDelete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AppDelete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err180 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err180 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AppDelete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "AppListV3":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppListV3 requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err182 := (strconv.Atoi(flag.Arg(2)))
    if err182 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err183 := (strconv.Atoi(flag.Arg(3)))
    if err183 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err184 := (strconv.Atoi(flag.Arg(4)))
    if err184 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.AppListV3(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "UpgradeToV3":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpgradeToV3 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err186 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err186 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpgradeToV3(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendRequest":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendRequest requires 1 args")
      flag.Usage()
    }
    arg187 := flag.Arg(1)
    mbTrans188 := thrift.NewTMemoryBufferLen(len(arg187))
    defer mbTrans188.Close()
    _, err189 := mbTrans188.WriteString(arg187)
    if err189 != nil {
      Usage()
      return
    }
    factory190 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt191 := factory190.GetProtocol(mbTrans188)
    argvalue0 := idl.NewRequestInfo()
    err192 := argvalue0.Read(jsProt191)
    if err192 != nil {
      Usage()
      return
    }
    value0 := idl.RequestInfo(argvalue0)
    fmt.Print(client.SendRequest(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
