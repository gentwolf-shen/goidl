// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package idl

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Page
//  - Size
//  - Count
//  - TotalPage
//  - Items
type ItemList struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  TotalPage int32 `thrift:"totalPage,4" db:"totalPage" json:"totalPage"`
  Items []map[string]string `thrift:"items,5" db:"items" json:"items"`
}

func NewItemList() *ItemList {
  return &ItemList{}
}


func (p *ItemList) GetPage() int32 {
  return p.Page
}

func (p *ItemList) GetSize() int32 {
  return p.Size
}

func (p *ItemList) GetCount() int32 {
  return p.Count
}

func (p *ItemList) GetTotalPage() int32 {
  return p.TotalPage
}

func (p *ItemList) GetItems() []map[string]string {
  return p.Items
}
func (p *ItemList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemList)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *ItemList)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *ItemList)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *ItemList)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalPage = v
}
  return nil
}

func (p *ItemList)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem0 :=  tMap
    for i := 0; i < size; i ++ {
var _key1 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key1 = v
}
var _val2 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val2 = v
}
      _elem0[_key1] = _val2
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Items = append(p.Items, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ItemList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemList) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *ItemList) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *ItemList) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *ItemList) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err) }
  return err
}

func (p *ItemList) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:items: ", p), err) }
  return err
}

func (p *ItemList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemList(%+v)", *p)
}

// Attributes:
//  - Info
//  - Keys
//  - V3keys
//  - V4keys
type AppItemInfo struct {
  Info map[string]string `thrift:"info,1" db:"info" json:"info"`
  Keys []map[string]string `thrift:"keys,2" db:"keys" json:"keys"`
  V3keys []map[string]string `thrift:"v3keys,3" db:"v3keys" json:"v3keys"`
  V4keys []map[string]string `thrift:"v4keys,4" db:"v4keys" json:"v4keys"`
}

func NewAppItemInfo() *AppItemInfo {
  return &AppItemInfo{}
}


func (p *AppItemInfo) GetInfo() map[string]string {
  return p.Info
}

func (p *AppItemInfo) GetKeys() []map[string]string {
  return p.Keys
}

func (p *AppItemInfo) GetV3keys() []map[string]string {
  return p.V3keys
}

func (p *AppItemInfo) GetV4keys() []map[string]string {
  return p.V4keys
}
func (p *AppItemInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppItemInfo)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Info =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Info[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AppItemInfo)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem5 :=  tMap
    for i := 0; i < size; i ++ {
var _key6 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key6 = v
}
var _val7 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val7 = v
}
      _elem5[_key6] = _val7
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Keys = append(p.Keys, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppItemInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.V3keys =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem8 :=  tMap
    for i := 0; i < size; i ++ {
var _key9 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key9 = v
}
var _val10 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val10 = v
}
      _elem8[_key9] = _val10
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.V3keys = append(p.V3keys, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppItemInfo)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.V4keys =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem11 :=  tMap
    for i := 0; i < size; i ++ {
var _key12 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key12 = v
}
var _val13 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val13 = v
}
      _elem11[_key12] = _val13
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.V4keys = append(p.V4keys, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppItemInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppItemInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppItemInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Info)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Info {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err) }
  return err
}

func (p *AppItemInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *AppItemInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("v3keys", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v3keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.V3keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.V3keys {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v3keys: ", p), err) }
  return err
}

func (p *AppItemInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("v4keys", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v4keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.V4keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.V4keys {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v4keys: ", p), err) }
  return err
}

func (p *AppItemInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppItemInfo(%+v)", *p)
}

// Attributes:
//  - Token
//  - Event
//  - Params
type RequestInfo struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Event string `thrift:"event,2" db:"event" json:"event"`
  Params map[string]string `thrift:"params,3" db:"params" json:"params"`
}

func NewRequestInfo() *RequestInfo {
  return &RequestInfo{}
}


func (p *RequestInfo) GetToken() string {
  return p.Token
}

func (p *RequestInfo) GetEvent() string {
  return p.Event
}

func (p *RequestInfo) GetParams() map[string]string {
  return p.Params
}
func (p *RequestInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RequestInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Event = v
}
  return nil
}

func (p *RequestInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.Params[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RequestInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RequestInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("event", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:event: ", p), err) }
  if err := oprot.WriteString(string(p.Event)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.event (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:event: ", p), err) }
  return err
}

func (p *RequestInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *RequestInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestInfo(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type ResponesReuslt struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message map[string]string `thrift:"message,2" db:"message" json:"message"`
}

func NewResponesReuslt() *ResponesReuslt {
  return &ResponesReuslt{}
}


func (p *ResponesReuslt) GetCode() int32 {
  return p.Code
}

func (p *ResponesReuslt) GetMessage() map[string]string {
  return p.Message
}
func (p *ResponesReuslt) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponesReuslt)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ResponesReuslt)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Message =  tMap
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.Message[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ResponesReuslt) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponesReuslt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponesReuslt) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ResponesReuslt) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Message)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Message {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ResponesReuslt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponesReuslt(%+v)", *p)
}

type EasyArIdl interface {
  Ping(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Token
  //  - Table
  //  - Key
  //  - Value
  //  - KeyId
  //  - CheckExists
  TableValueUpdate(ctx context.Context, token string, table string, key string, value string, keyId int64, checkExists bool) (r bool, err error)
  // Parameters:
  //  - Token
  //  - ServiceType
  //  - RegionCode
  IsAllowedFreeTry(ctx context.Context, token string, serviceType int8, regionCode string) (r bool, err error)
  // Parameters:
  //  - Key
  //  - Value
  LoginItemIsExists(ctx context.Context, key string, value string) (r bool, err error)
  // Parameters:
  //  - Username
  //  - Email
  //  - Password
  //  - IP
  //  - FromDomain
  SaveUser(ctx context.Context, username string, email string, password string, ip string, fromDomain string) (r int32, err error)
  // Parameters:
  //  - Code
  ActiveUser(ctx context.Context, code string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - OldPassword
  //  - NewPassword_
  UpdatePassword(ctx context.Context, token string, oldPassword string, newPassword string) (r bool, err error)
  // Parameters:
  //  - Username
  //  - Password
  //  - IP
  Login(ctx context.Context, username string, password string, ip string) (r map[string]string, err error)
  // Parameters:
  //  - Email
  //  - FromDomain
  ForgotPasswordEmailSend(ctx context.Context, email string, fromDomain string) (r bool, err error)
  // Parameters:
  //  - Code
  //  - Password
  ForgotPasswordEmailVerify(ctx context.Context, code string, password string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - ServiceId
  UserHasRight(ctx context.Context, token string, serviceId int8) (r bool, err error)
  // Parameters:
  //  - Token
  UserForgotCodeStatus(ctx context.Context, token string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - FromDomain
  UserForgotCodeResend(ctx context.Context, token string, fromDomain string) (r bool, err error)
  // Parameters:
  //  - Code
  //  - FromDomain
  UserRegisterEmailResend(ctx context.Context, code string, fromDomain string) (r bool, err error)
  // Parameters:
  //  - Token
  UserBindedMobile(ctx context.Context, token string) (r string, err error)
  // Parameters:
  //  - Token
  //  - Mobile
  //  - Lang
  UserBindMobileSendCode(ctx context.Context, token string, mobile string, lang string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - Mobile
  //  - Code
  UserBindMobileUpdate(ctx context.Context, token string, mobile string, code string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - Email
  //  - FromDomain
  UserBindEmail(ctx context.Context, token string, email string, fromDomain string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - Params
  UserApplyService(ctx context.Context, token string, params map[string]string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - ServiceType
  UserRightCreateAction(ctx context.Context, token string, serviceType int8) (r bool, err error)
  // Parameters:
  //  - Token
  //  - ServiceType
  UserRightOwnedAction(ctx context.Context, token string, serviceType int8) (r bool, err error)
  // Parameters:
  //  - Token
  //  - Params
  OrderInfoSave(ctx context.Context, token string, params map[string]string) (r string, err error)
  // Parameters:
  //  - Token
  //  - OrderId
  //  - Params
  OrderInfoForm(ctx context.Context, token string, orderId string, params map[string]string) (r map[string]string, err error)
  // Parameters:
  //  - Token
  //  - OrderId
  OrderInfo(ctx context.Context, token string, orderId string) (r map[string]string, err error)
  // Parameters:
  //  - Token
  //  - OrderId
  OrderInfoBalancePay(ctx context.Context, token string, orderId string) (r bool, err error)
  // Parameters:
  //  - PayProvider
  //  - Params
  PayCallbackVerify(ctx context.Context, payProvider int8, params map[string]string) (r bool, err error)
  // Parameters:
  //  - Token
  //  - AppId
  AppInfo(ctx context.Context, token string, appId int64) (r *AppItemInfo, err error)
  // Parameters:
  //  - Token
  //  - AppId
  AppDelete(ctx context.Context, token string, appId int64) (r bool, err error)
  // Parameters:
  //  - Token
  //  - Page
  //  - Size
  //  - AppType
  AppListV3(ctx context.Context, token string, page int32, size int32, appType int8) (r *ItemList, err error)
  // Parameters:
  //  - Token
  //  - AppId
  UpgradeToV3(ctx context.Context, token string, appId int64) (r bool, err error)
  // Parameters:
  //  - RequestInfo
  SendRequest(ctx context.Context, requestInfo *RequestInfo) (r *ResponesReuslt, err error)
}

type EasyArIdlClient struct {
  c thrift.TClient
}

// Deprecated: Use NewEasyArIdl instead
func NewEasyArIdlClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EasyArIdlClient {
  return &EasyArIdlClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewEasyArIdl instead
func NewEasyArIdlClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EasyArIdlClient {
  return &EasyArIdlClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewEasyArIdlClient(c thrift.TClient) *EasyArIdlClient {
  return &EasyArIdlClient{
    c: c,
  }
}

func (p *EasyArIdlClient) Ping(ctx context.Context) (r string, err error) {
  var _args18 EasyArIdlPingArgs
  var _result19 EasyArIdlPingResult
  if err = p.c.Call(ctx, "ping", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Table
//  - Key
//  - Value
//  - KeyId
//  - CheckExists
func (p *EasyArIdlClient) TableValueUpdate(ctx context.Context, token string, table string, key string, value string, keyId int64, checkExists bool) (r bool, err error) {
  var _args20 EasyArIdlTableValueUpdateArgs
  _args20.Token = token
  _args20.Table = table
  _args20.Key = key
  _args20.Value = value
  _args20.KeyId = keyId
  _args20.CheckExists = checkExists
  var _result21 EasyArIdlTableValueUpdateResult
  if err = p.c.Call(ctx, "TableValueUpdate", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - ServiceType
//  - RegionCode
func (p *EasyArIdlClient) IsAllowedFreeTry(ctx context.Context, token string, serviceType int8, regionCode string) (r bool, err error) {
  var _args22 EasyArIdlIsAllowedFreeTryArgs
  _args22.Token = token
  _args22.ServiceType = serviceType
  _args22.RegionCode = regionCode
  var _result23 EasyArIdlIsAllowedFreeTryResult
  if err = p.c.Call(ctx, "IsAllowedFreeTry", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Value
func (p *EasyArIdlClient) LoginItemIsExists(ctx context.Context, key string, value string) (r bool, err error) {
  var _args24 EasyArIdlLoginItemIsExistsArgs
  _args24.Key = key
  _args24.Value = value
  var _result25 EasyArIdlLoginItemIsExistsResult
  if err = p.c.Call(ctx, "LoginItemIsExists", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - Username
//  - Email
//  - Password
//  - IP
//  - FromDomain
func (p *EasyArIdlClient) SaveUser(ctx context.Context, username string, email string, password string, ip string, fromDomain string) (r int32, err error) {
  var _args26 EasyArIdlSaveUserArgs
  _args26.Username = username
  _args26.Email = email
  _args26.Password = password
  _args26.IP = ip
  _args26.FromDomain = fromDomain
  var _result27 EasyArIdlSaveUserResult
  if err = p.c.Call(ctx, "SaveUser", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - Code
func (p *EasyArIdlClient) ActiveUser(ctx context.Context, code string) (r bool, err error) {
  var _args28 EasyArIdlActiveUserArgs
  _args28.Code = code
  var _result29 EasyArIdlActiveUserResult
  if err = p.c.Call(ctx, "ActiveUser", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - OldPassword
//  - NewPassword_
func (p *EasyArIdlClient) UpdatePassword(ctx context.Context, token string, oldPassword string, newPassword string) (r bool, err error) {
  var _args30 EasyArIdlUpdatePasswordArgs
  _args30.Token = token
  _args30.OldPassword = oldPassword
  _args30.NewPassword_ = newPassword
  var _result31 EasyArIdlUpdatePasswordResult
  if err = p.c.Call(ctx, "UpdatePassword", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Parameters:
//  - Username
//  - Password
//  - IP
func (p *EasyArIdlClient) Login(ctx context.Context, username string, password string, ip string) (r map[string]string, err error) {
  var _args32 EasyArIdlLoginArgs
  _args32.Username = username
  _args32.Password = password
  _args32.IP = ip
  var _result33 EasyArIdlLoginResult
  if err = p.c.Call(ctx, "Login", &_args32, &_result33); err != nil {
    return
  }
  return _result33.GetSuccess(), nil
}

// Parameters:
//  - Email
//  - FromDomain
func (p *EasyArIdlClient) ForgotPasswordEmailSend(ctx context.Context, email string, fromDomain string) (r bool, err error) {
  var _args34 EasyArIdlForgotPasswordEmailSendArgs
  _args34.Email = email
  _args34.FromDomain = fromDomain
  var _result35 EasyArIdlForgotPasswordEmailSendResult
  if err = p.c.Call(ctx, "ForgotPasswordEmailSend", &_args34, &_result35); err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - Password
func (p *EasyArIdlClient) ForgotPasswordEmailVerify(ctx context.Context, code string, password string) (r bool, err error) {
  var _args36 EasyArIdlForgotPasswordEmailVerifyArgs
  _args36.Code = code
  _args36.Password = password
  var _result37 EasyArIdlForgotPasswordEmailVerifyResult
  if err = p.c.Call(ctx, "ForgotPasswordEmailVerify", &_args36, &_result37); err != nil {
    return
  }
  return _result37.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - ServiceId
func (p *EasyArIdlClient) UserHasRight(ctx context.Context, token string, serviceId int8) (r bool, err error) {
  var _args38 EasyArIdlUserHasRightArgs
  _args38.Token = token
  _args38.ServiceId = serviceId
  var _result39 EasyArIdlUserHasRightResult
  if err = p.c.Call(ctx, "UserHasRight", &_args38, &_result39); err != nil {
    return
  }
  return _result39.GetSuccess(), nil
}

// Parameters:
//  - Token
func (p *EasyArIdlClient) UserForgotCodeStatus(ctx context.Context, token string) (r bool, err error) {
  var _args40 EasyArIdlUserForgotCodeStatusArgs
  _args40.Token = token
  var _result41 EasyArIdlUserForgotCodeStatusResult
  if err = p.c.Call(ctx, "UserForgotCodeStatus", &_args40, &_result41); err != nil {
    return
  }
  return _result41.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - FromDomain
func (p *EasyArIdlClient) UserForgotCodeResend(ctx context.Context, token string, fromDomain string) (r bool, err error) {
  var _args42 EasyArIdlUserForgotCodeResendArgs
  _args42.Token = token
  _args42.FromDomain = fromDomain
  var _result43 EasyArIdlUserForgotCodeResendResult
  if err = p.c.Call(ctx, "UserForgotCodeResend", &_args42, &_result43); err != nil {
    return
  }
  return _result43.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - FromDomain
func (p *EasyArIdlClient) UserRegisterEmailResend(ctx context.Context, code string, fromDomain string) (r bool, err error) {
  var _args44 EasyArIdlUserRegisterEmailResendArgs
  _args44.Code = code
  _args44.FromDomain = fromDomain
  var _result45 EasyArIdlUserRegisterEmailResendResult
  if err = p.c.Call(ctx, "UserRegisterEmailResend", &_args44, &_result45); err != nil {
    return
  }
  return _result45.GetSuccess(), nil
}

// Parameters:
//  - Token
func (p *EasyArIdlClient) UserBindedMobile(ctx context.Context, token string) (r string, err error) {
  var _args46 EasyArIdlUserBindedMobileArgs
  _args46.Token = token
  var _result47 EasyArIdlUserBindedMobileResult
  if err = p.c.Call(ctx, "UserBindedMobile", &_args46, &_result47); err != nil {
    return
  }
  return _result47.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Mobile
//  - Lang
func (p *EasyArIdlClient) UserBindMobileSendCode(ctx context.Context, token string, mobile string, lang string) (r bool, err error) {
  var _args48 EasyArIdlUserBindMobileSendCodeArgs
  _args48.Token = token
  _args48.Mobile = mobile
  _args48.Lang = lang
  var _result49 EasyArIdlUserBindMobileSendCodeResult
  if err = p.c.Call(ctx, "UserBindMobileSendCode", &_args48, &_result49); err != nil {
    return
  }
  return _result49.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Mobile
//  - Code
func (p *EasyArIdlClient) UserBindMobileUpdate(ctx context.Context, token string, mobile string, code string) (r bool, err error) {
  var _args50 EasyArIdlUserBindMobileUpdateArgs
  _args50.Token = token
  _args50.Mobile = mobile
  _args50.Code = code
  var _result51 EasyArIdlUserBindMobileUpdateResult
  if err = p.c.Call(ctx, "UserBindMobileUpdate", &_args50, &_result51); err != nil {
    return
  }
  return _result51.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Email
//  - FromDomain
func (p *EasyArIdlClient) UserBindEmail(ctx context.Context, token string, email string, fromDomain string) (r bool, err error) {
  var _args52 EasyArIdlUserBindEmailArgs
  _args52.Token = token
  _args52.Email = email
  _args52.FromDomain = fromDomain
  var _result53 EasyArIdlUserBindEmailResult
  if err = p.c.Call(ctx, "UserBindEmail", &_args52, &_result53); err != nil {
    return
  }
  return _result53.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Params
func (p *EasyArIdlClient) UserApplyService(ctx context.Context, token string, params map[string]string) (r bool, err error) {
  var _args54 EasyArIdlUserApplyServiceArgs
  _args54.Token = token
  _args54.Params = params
  var _result55 EasyArIdlUserApplyServiceResult
  if err = p.c.Call(ctx, "UserApplyService", &_args54, &_result55); err != nil {
    return
  }
  return _result55.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - ServiceType
func (p *EasyArIdlClient) UserRightCreateAction(ctx context.Context, token string, serviceType int8) (r bool, err error) {
  var _args56 EasyArIdlUserRightCreateActionArgs
  _args56.Token = token
  _args56.ServiceType = serviceType
  var _result57 EasyArIdlUserRightCreateActionResult
  if err = p.c.Call(ctx, "UserRightCreateAction", &_args56, &_result57); err != nil {
    return
  }
  return _result57.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - ServiceType
func (p *EasyArIdlClient) UserRightOwnedAction(ctx context.Context, token string, serviceType int8) (r bool, err error) {
  var _args58 EasyArIdlUserRightOwnedActionArgs
  _args58.Token = token
  _args58.ServiceType = serviceType
  var _result59 EasyArIdlUserRightOwnedActionResult
  if err = p.c.Call(ctx, "UserRightOwnedAction", &_args58, &_result59); err != nil {
    return
  }
  return _result59.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Params
func (p *EasyArIdlClient) OrderInfoSave(ctx context.Context, token string, params map[string]string) (r string, err error) {
  var _args60 EasyArIdlOrderInfoSaveArgs
  _args60.Token = token
  _args60.Params = params
  var _result61 EasyArIdlOrderInfoSaveResult
  if err = p.c.Call(ctx, "OrderInfoSave", &_args60, &_result61); err != nil {
    return
  }
  return _result61.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - OrderId
//  - Params
func (p *EasyArIdlClient) OrderInfoForm(ctx context.Context, token string, orderId string, params map[string]string) (r map[string]string, err error) {
  var _args62 EasyArIdlOrderInfoFormArgs
  _args62.Token = token
  _args62.OrderId = orderId
  _args62.Params = params
  var _result63 EasyArIdlOrderInfoFormResult
  if err = p.c.Call(ctx, "OrderInfoForm", &_args62, &_result63); err != nil {
    return
  }
  return _result63.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - OrderId
func (p *EasyArIdlClient) OrderInfo(ctx context.Context, token string, orderId string) (r map[string]string, err error) {
  var _args64 EasyArIdlOrderInfoArgs
  _args64.Token = token
  _args64.OrderId = orderId
  var _result65 EasyArIdlOrderInfoResult
  if err = p.c.Call(ctx, "OrderInfo", &_args64, &_result65); err != nil {
    return
  }
  return _result65.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - OrderId
func (p *EasyArIdlClient) OrderInfoBalancePay(ctx context.Context, token string, orderId string) (r bool, err error) {
  var _args66 EasyArIdlOrderInfoBalancePayArgs
  _args66.Token = token
  _args66.OrderId = orderId
  var _result67 EasyArIdlOrderInfoBalancePayResult
  if err = p.c.Call(ctx, "OrderInfoBalancePay", &_args66, &_result67); err != nil {
    return
  }
  return _result67.GetSuccess(), nil
}

// Parameters:
//  - PayProvider
//  - Params
func (p *EasyArIdlClient) PayCallbackVerify(ctx context.Context, payProvider int8, params map[string]string) (r bool, err error) {
  var _args68 EasyArIdlPayCallbackVerifyArgs
  _args68.PayProvider = payProvider
  _args68.Params = params
  var _result69 EasyArIdlPayCallbackVerifyResult
  if err = p.c.Call(ctx, "PayCallbackVerify", &_args68, &_result69); err != nil {
    return
  }
  return _result69.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - AppId
func (p *EasyArIdlClient) AppInfo(ctx context.Context, token string, appId int64) (r *AppItemInfo, err error) {
  var _args70 EasyArIdlAppInfoArgs
  _args70.Token = token
  _args70.AppId = appId
  var _result71 EasyArIdlAppInfoResult
  if err = p.c.Call(ctx, "AppInfo", &_args70, &_result71); err != nil {
    return
  }
  return _result71.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - AppId
func (p *EasyArIdlClient) AppDelete(ctx context.Context, token string, appId int64) (r bool, err error) {
  var _args72 EasyArIdlAppDeleteArgs
  _args72.Token = token
  _args72.AppId = appId
  var _result73 EasyArIdlAppDeleteResult
  if err = p.c.Call(ctx, "AppDelete", &_args72, &_result73); err != nil {
    return
  }
  return _result73.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Page
//  - Size
//  - AppType
func (p *EasyArIdlClient) AppListV3(ctx context.Context, token string, page int32, size int32, appType int8) (r *ItemList, err error) {
  var _args74 EasyArIdlAppListV3Args
  _args74.Token = token
  _args74.Page = page
  _args74.Size = size
  _args74.AppType = appType
  var _result75 EasyArIdlAppListV3Result
  if err = p.c.Call(ctx, "AppListV3", &_args74, &_result75); err != nil {
    return
  }
  return _result75.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - AppId
func (p *EasyArIdlClient) UpgradeToV3(ctx context.Context, token string, appId int64) (r bool, err error) {
  var _args76 EasyArIdlUpgradeToV3Args
  _args76.Token = token
  _args76.AppId = appId
  var _result77 EasyArIdlUpgradeToV3Result
  if err = p.c.Call(ctx, "UpgradeToV3", &_args76, &_result77); err != nil {
    return
  }
  return _result77.GetSuccess(), nil
}

// Parameters:
//  - RequestInfo
func (p *EasyArIdlClient) SendRequest(ctx context.Context, requestInfo *RequestInfo) (r *ResponesReuslt, err error) {
  var _args78 EasyArIdlSendRequestArgs
  _args78.RequestInfo = requestInfo
  var _result79 EasyArIdlSendRequestResult
  if err = p.c.Call(ctx, "sendRequest", &_args78, &_result79); err != nil {
    return
  }
  return _result79.GetSuccess(), nil
}

type EasyArIdlProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler EasyArIdl
}

func (p *EasyArIdlProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *EasyArIdlProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *EasyArIdlProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewEasyArIdlProcessor(handler EasyArIdl) *EasyArIdlProcessor {

  self80 := &EasyArIdlProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self80.processorMap["ping"] = &easyArIdlProcessorPing{handler:handler}
  self80.processorMap["TableValueUpdate"] = &easyArIdlProcessorTableValueUpdate{handler:handler}
  self80.processorMap["IsAllowedFreeTry"] = &easyArIdlProcessorIsAllowedFreeTry{handler:handler}
  self80.processorMap["LoginItemIsExists"] = &easyArIdlProcessorLoginItemIsExists{handler:handler}
  self80.processorMap["SaveUser"] = &easyArIdlProcessorSaveUser{handler:handler}
  self80.processorMap["ActiveUser"] = &easyArIdlProcessorActiveUser{handler:handler}
  self80.processorMap["UpdatePassword"] = &easyArIdlProcessorUpdatePassword{handler:handler}
  self80.processorMap["Login"] = &easyArIdlProcessorLogin{handler:handler}
  self80.processorMap["ForgotPasswordEmailSend"] = &easyArIdlProcessorForgotPasswordEmailSend{handler:handler}
  self80.processorMap["ForgotPasswordEmailVerify"] = &easyArIdlProcessorForgotPasswordEmailVerify{handler:handler}
  self80.processorMap["UserHasRight"] = &easyArIdlProcessorUserHasRight{handler:handler}
  self80.processorMap["UserForgotCodeStatus"] = &easyArIdlProcessorUserForgotCodeStatus{handler:handler}
  self80.processorMap["UserForgotCodeResend"] = &easyArIdlProcessorUserForgotCodeResend{handler:handler}
  self80.processorMap["UserRegisterEmailResend"] = &easyArIdlProcessorUserRegisterEmailResend{handler:handler}
  self80.processorMap["UserBindedMobile"] = &easyArIdlProcessorUserBindedMobile{handler:handler}
  self80.processorMap["UserBindMobileSendCode"] = &easyArIdlProcessorUserBindMobileSendCode{handler:handler}
  self80.processorMap["UserBindMobileUpdate"] = &easyArIdlProcessorUserBindMobileUpdate{handler:handler}
  self80.processorMap["UserBindEmail"] = &easyArIdlProcessorUserBindEmail{handler:handler}
  self80.processorMap["UserApplyService"] = &easyArIdlProcessorUserApplyService{handler:handler}
  self80.processorMap["UserRightCreateAction"] = &easyArIdlProcessorUserRightCreateAction{handler:handler}
  self80.processorMap["UserRightOwnedAction"] = &easyArIdlProcessorUserRightOwnedAction{handler:handler}
  self80.processorMap["OrderInfoSave"] = &easyArIdlProcessorOrderInfoSave{handler:handler}
  self80.processorMap["OrderInfoForm"] = &easyArIdlProcessorOrderInfoForm{handler:handler}
  self80.processorMap["OrderInfo"] = &easyArIdlProcessorOrderInfo{handler:handler}
  self80.processorMap["OrderInfoBalancePay"] = &easyArIdlProcessorOrderInfoBalancePay{handler:handler}
  self80.processorMap["PayCallbackVerify"] = &easyArIdlProcessorPayCallbackVerify{handler:handler}
  self80.processorMap["AppInfo"] = &easyArIdlProcessorAppInfo{handler:handler}
  self80.processorMap["AppDelete"] = &easyArIdlProcessorAppDelete{handler:handler}
  self80.processorMap["AppListV3"] = &easyArIdlProcessorAppListV3{handler:handler}
  self80.processorMap["UpgradeToV3"] = &easyArIdlProcessorUpgradeToV3{handler:handler}
  self80.processorMap["sendRequest"] = &easyArIdlProcessorSendRequest{handler:handler}
return self80
}

func (p *EasyArIdlProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x81 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x81.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x81

}

type easyArIdlProcessorPing struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlPingResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorTableValueUpdate struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorTableValueUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlTableValueUpdateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("TableValueUpdate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlTableValueUpdateResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.TableValueUpdate(ctx, args.Token, args.Table, args.Key, args.Value, args.KeyId, args.CheckExists); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TableValueUpdate: " + err2.Error())
    oprot.WriteMessageBegin("TableValueUpdate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("TableValueUpdate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorIsAllowedFreeTry struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorIsAllowedFreeTry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlIsAllowedFreeTryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("IsAllowedFreeTry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlIsAllowedFreeTryResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsAllowedFreeTry(ctx, args.Token, args.ServiceType, args.RegionCode); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsAllowedFreeTry: " + err2.Error())
    oprot.WriteMessageBegin("IsAllowedFreeTry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("IsAllowedFreeTry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorLoginItemIsExists struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorLoginItemIsExists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlLoginItemIsExistsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("LoginItemIsExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlLoginItemIsExistsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.LoginItemIsExists(ctx, args.Key, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LoginItemIsExists: " + err2.Error())
    oprot.WriteMessageBegin("LoginItemIsExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("LoginItemIsExists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorSaveUser struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorSaveUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlSaveUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SaveUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlSaveUserResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SaveUser(ctx, args.Username, args.Email, args.Password, args.IP, args.FromDomain); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveUser: " + err2.Error())
    oprot.WriteMessageBegin("SaveUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SaveUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorActiveUser struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorActiveUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlActiveUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ActiveUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlActiveUserResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ActiveUser(ctx, args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActiveUser: " + err2.Error())
    oprot.WriteMessageBegin("ActiveUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ActiveUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUpdatePassword struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUpdatePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUpdatePasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdatePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUpdatePasswordResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdatePassword(ctx, args.Token, args.OldPassword, args.NewPassword_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePassword: " + err2.Error())
    oprot.WriteMessageBegin("UpdatePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UpdatePassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorLogin struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlLoginResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.Username, args.Password, args.IP); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorForgotPasswordEmailSend struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorForgotPasswordEmailSend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlForgotPasswordEmailSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ForgotPasswordEmailSend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlForgotPasswordEmailSendResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ForgotPasswordEmailSend(ctx, args.Email, args.FromDomain); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ForgotPasswordEmailSend: " + err2.Error())
    oprot.WriteMessageBegin("ForgotPasswordEmailSend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ForgotPasswordEmailSend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorForgotPasswordEmailVerify struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorForgotPasswordEmailVerify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlForgotPasswordEmailVerifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ForgotPasswordEmailVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlForgotPasswordEmailVerifyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ForgotPasswordEmailVerify(ctx, args.Code, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ForgotPasswordEmailVerify: " + err2.Error())
    oprot.WriteMessageBegin("ForgotPasswordEmailVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ForgotPasswordEmailVerify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserHasRight struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserHasRight) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserHasRightArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserHasRight", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserHasRightResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserHasRight(ctx, args.Token, args.ServiceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserHasRight: " + err2.Error())
    oprot.WriteMessageBegin("UserHasRight", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserHasRight", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserForgotCodeStatus struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserForgotCodeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserForgotCodeStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserForgotCodeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserForgotCodeStatusResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserForgotCodeStatus(ctx, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserForgotCodeStatus: " + err2.Error())
    oprot.WriteMessageBegin("UserForgotCodeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserForgotCodeStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserForgotCodeResend struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserForgotCodeResend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserForgotCodeResendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserForgotCodeResend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserForgotCodeResendResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserForgotCodeResend(ctx, args.Token, args.FromDomain); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserForgotCodeResend: " + err2.Error())
    oprot.WriteMessageBegin("UserForgotCodeResend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserForgotCodeResend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserRegisterEmailResend struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserRegisterEmailResend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserRegisterEmailResendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserRegisterEmailResend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserRegisterEmailResendResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserRegisterEmailResend(ctx, args.Code, args.FromDomain); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserRegisterEmailResend: " + err2.Error())
    oprot.WriteMessageBegin("UserRegisterEmailResend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserRegisterEmailResend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserBindedMobile struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserBindedMobile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserBindedMobileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserBindedMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserBindedMobileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.UserBindedMobile(ctx, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserBindedMobile: " + err2.Error())
    oprot.WriteMessageBegin("UserBindedMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserBindedMobile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserBindMobileSendCode struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserBindMobileSendCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserBindMobileSendCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserBindMobileSendCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserBindMobileSendCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserBindMobileSendCode(ctx, args.Token, args.Mobile, args.Lang); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserBindMobileSendCode: " + err2.Error())
    oprot.WriteMessageBegin("UserBindMobileSendCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserBindMobileSendCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserBindMobileUpdate struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserBindMobileUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserBindMobileUpdateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserBindMobileUpdate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserBindMobileUpdateResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserBindMobileUpdate(ctx, args.Token, args.Mobile, args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserBindMobileUpdate: " + err2.Error())
    oprot.WriteMessageBegin("UserBindMobileUpdate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserBindMobileUpdate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserBindEmail struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserBindEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserBindEmailArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserBindEmail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserBindEmailResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserBindEmail(ctx, args.Token, args.Email, args.FromDomain); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserBindEmail: " + err2.Error())
    oprot.WriteMessageBegin("UserBindEmail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserBindEmail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserApplyService struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserApplyService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserApplyServiceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserApplyService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserApplyServiceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserApplyService(ctx, args.Token, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserApplyService: " + err2.Error())
    oprot.WriteMessageBegin("UserApplyService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserApplyService", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserRightCreateAction struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserRightCreateAction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserRightCreateActionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserRightCreateAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserRightCreateActionResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserRightCreateAction(ctx, args.Token, args.ServiceType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserRightCreateAction: " + err2.Error())
    oprot.WriteMessageBegin("UserRightCreateAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserRightCreateAction", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUserRightOwnedAction struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUserRightOwnedAction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUserRightOwnedActionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserRightOwnedAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUserRightOwnedActionResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserRightOwnedAction(ctx, args.Token, args.ServiceType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserRightOwnedAction: " + err2.Error())
    oprot.WriteMessageBegin("UserRightOwnedAction", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserRightOwnedAction", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorOrderInfoSave struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorOrderInfoSave) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlOrderInfoSaveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrderInfoSave", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlOrderInfoSaveResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.OrderInfoSave(ctx, args.Token, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrderInfoSave: " + err2.Error())
    oprot.WriteMessageBegin("OrderInfoSave", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("OrderInfoSave", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorOrderInfoForm struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorOrderInfoForm) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlOrderInfoFormArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrderInfoForm", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlOrderInfoFormResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.OrderInfoForm(ctx, args.Token, args.OrderId, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrderInfoForm: " + err2.Error())
    oprot.WriteMessageBegin("OrderInfoForm", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("OrderInfoForm", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorOrderInfo struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorOrderInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlOrderInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrderInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlOrderInfoResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.OrderInfo(ctx, args.Token, args.OrderId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrderInfo: " + err2.Error())
    oprot.WriteMessageBegin("OrderInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("OrderInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorOrderInfoBalancePay struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorOrderInfoBalancePay) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlOrderInfoBalancePayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrderInfoBalancePay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlOrderInfoBalancePayResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.OrderInfoBalancePay(ctx, args.Token, args.OrderId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrderInfoBalancePay: " + err2.Error())
    oprot.WriteMessageBegin("OrderInfoBalancePay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("OrderInfoBalancePay", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorPayCallbackVerify struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorPayCallbackVerify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlPayCallbackVerifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PayCallbackVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlPayCallbackVerifyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.PayCallbackVerify(ctx, args.PayProvider, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PayCallbackVerify: " + err2.Error())
    oprot.WriteMessageBegin("PayCallbackVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("PayCallbackVerify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorAppInfo struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorAppInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlAppInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AppInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlAppInfoResult{}
var retval *AppItemInfo
  var err2 error
  if retval, err2 = p.handler.AppInfo(ctx, args.Token, args.AppId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppInfo: " + err2.Error())
    oprot.WriteMessageBegin("AppInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AppInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorAppDelete struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorAppDelete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlAppDeleteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AppDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlAppDeleteResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AppDelete(ctx, args.Token, args.AppId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppDelete: " + err2.Error())
    oprot.WriteMessageBegin("AppDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("AppDelete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorAppListV3 struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorAppListV3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlAppListV3Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AppListV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlAppListV3Result{}
var retval *ItemList
  var err2 error
  if retval, err2 = p.handler.AppListV3(ctx, args.Token, args.Page, args.Size, args.AppType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppListV3: " + err2.Error())
    oprot.WriteMessageBegin("AppListV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AppListV3", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorUpgradeToV3 struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorUpgradeToV3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlUpgradeToV3Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpgradeToV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlUpgradeToV3Result{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpgradeToV3(ctx, args.Token, args.AppId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpgradeToV3: " + err2.Error())
    oprot.WriteMessageBegin("UpgradeToV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UpgradeToV3", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type easyArIdlProcessorSendRequest struct {
  handler EasyArIdl
}

func (p *easyArIdlProcessorSendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EasyArIdlSendRequestArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EasyArIdlSendRequestResult{}
var retval *ResponesReuslt
  var err2 error
  if retval, err2 = p.handler.SendRequest(ctx, args.RequestInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendRequest: " + err2.Error())
    oprot.WriteMessageBegin("sendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendRequest", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type EasyArIdlPingArgs struct {
}

func NewEasyArIdlPingArgs() *EasyArIdlPingArgs {
  return &EasyArIdlPingArgs{}
}

func (p *EasyArIdlPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlPingResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlPingResult() *EasyArIdlPingResult {
  return &EasyArIdlPingResult{}
}

var EasyArIdlPingResult_Success_DEFAULT string
func (p *EasyArIdlPingResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EasyArIdlPingResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlPingResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Table
//  - Key
//  - Value
//  - KeyId
//  - CheckExists
type EasyArIdlTableValueUpdateArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Table string `thrift:"table,2" db:"table" json:"table"`
  Key string `thrift:"key,3" db:"key" json:"key"`
  Value string `thrift:"value,4" db:"value" json:"value"`
  KeyId int64 `thrift:"keyId,5" db:"keyId" json:"keyId"`
  CheckExists bool `thrift:"checkExists,6" db:"checkExists" json:"checkExists"`
}

func NewEasyArIdlTableValueUpdateArgs() *EasyArIdlTableValueUpdateArgs {
  return &EasyArIdlTableValueUpdateArgs{}
}


func (p *EasyArIdlTableValueUpdateArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlTableValueUpdateArgs) GetTable() string {
  return p.Table
}

func (p *EasyArIdlTableValueUpdateArgs) GetKey() string {
  return p.Key
}

func (p *EasyArIdlTableValueUpdateArgs) GetValue() string {
  return p.Value
}

func (p *EasyArIdlTableValueUpdateArgs) GetKeyId() int64 {
  return p.KeyId
}

func (p *EasyArIdlTableValueUpdateArgs) GetCheckExists() bool {
  return p.CheckExists
}
func (p *EasyArIdlTableValueUpdateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CheckExists = v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TableValueUpdate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlTableValueUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table: ", p), err) }
  if err := oprot.WriteString(string(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyId: ", p), err) }
  if err := oprot.WriteI64(int64(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyId: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checkExists", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:checkExists: ", p), err) }
  if err := oprot.WriteBool(bool(p.CheckExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checkExists (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:checkExists: ", p), err) }
  return err
}

func (p *EasyArIdlTableValueUpdateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlTableValueUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlTableValueUpdateResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlTableValueUpdateResult() *EasyArIdlTableValueUpdateResult {
  return &EasyArIdlTableValueUpdateResult{}
}

var EasyArIdlTableValueUpdateResult_Success_DEFAULT bool
func (p *EasyArIdlTableValueUpdateResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlTableValueUpdateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlTableValueUpdateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlTableValueUpdateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlTableValueUpdateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlTableValueUpdateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TableValueUpdate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlTableValueUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlTableValueUpdateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlTableValueUpdateResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ServiceType
//  - RegionCode
type EasyArIdlIsAllowedFreeTryArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ServiceType int8 `thrift:"serviceType,2" db:"serviceType" json:"serviceType"`
  RegionCode string `thrift:"regionCode,3" db:"regionCode" json:"regionCode"`
}

func NewEasyArIdlIsAllowedFreeTryArgs() *EasyArIdlIsAllowedFreeTryArgs {
  return &EasyArIdlIsAllowedFreeTryArgs{}
}


func (p *EasyArIdlIsAllowedFreeTryArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlIsAllowedFreeTryArgs) GetServiceType() int8 {
  return p.ServiceType
}

func (p *EasyArIdlIsAllowedFreeTryArgs) GetRegionCode() string {
  return p.RegionCode
}
func (p *EasyArIdlIsAllowedFreeTryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.ServiceType = temp
}
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsAllowedFreeTry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlIsAllowedFreeTryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceType: ", p), err) }
  if err := oprot.WriteByte(int8(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceType: ", p), err) }
  return err
}

func (p *EasyArIdlIsAllowedFreeTryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:regionCode: ", p), err) }
  if err := oprot.WriteString(string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:regionCode: ", p), err) }
  return err
}

func (p *EasyArIdlIsAllowedFreeTryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlIsAllowedFreeTryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlIsAllowedFreeTryResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlIsAllowedFreeTryResult() *EasyArIdlIsAllowedFreeTryResult {
  return &EasyArIdlIsAllowedFreeTryResult{}
}

var EasyArIdlIsAllowedFreeTryResult_Success_DEFAULT bool
func (p *EasyArIdlIsAllowedFreeTryResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlIsAllowedFreeTryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlIsAllowedFreeTryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlIsAllowedFreeTryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsAllowedFreeTry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlIsAllowedFreeTryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlIsAllowedFreeTryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlIsAllowedFreeTryResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type EasyArIdlLoginItemIsExistsArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewEasyArIdlLoginItemIsExistsArgs() *EasyArIdlLoginItemIsExistsArgs {
  return &EasyArIdlLoginItemIsExistsArgs{}
}


func (p *EasyArIdlLoginItemIsExistsArgs) GetKey() string {
  return p.Key
}

func (p *EasyArIdlLoginItemIsExistsArgs) GetValue() string {
  return p.Value
}
func (p *EasyArIdlLoginItemIsExistsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlLoginItemIsExistsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *EasyArIdlLoginItemIsExistsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *EasyArIdlLoginItemIsExistsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginItemIsExists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlLoginItemIsExistsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *EasyArIdlLoginItemIsExistsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *EasyArIdlLoginItemIsExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlLoginItemIsExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlLoginItemIsExistsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlLoginItemIsExistsResult() *EasyArIdlLoginItemIsExistsResult {
  return &EasyArIdlLoginItemIsExistsResult{}
}

var EasyArIdlLoginItemIsExistsResult_Success_DEFAULT bool
func (p *EasyArIdlLoginItemIsExistsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlLoginItemIsExistsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlLoginItemIsExistsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlLoginItemIsExistsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlLoginItemIsExistsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlLoginItemIsExistsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginItemIsExists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlLoginItemIsExistsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlLoginItemIsExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlLoginItemIsExistsResult(%+v)", *p)
}

// Attributes:
//  - Username
//  - Email
//  - Password
//  - IP
//  - FromDomain
type EasyArIdlSaveUserArgs struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  Password string `thrift:"password,3" db:"password" json:"password"`
  IP string `thrift:"ip,4" db:"ip" json:"ip"`
  FromDomain string `thrift:"fromDomain,5" db:"fromDomain" json:"fromDomain"`
}

func NewEasyArIdlSaveUserArgs() *EasyArIdlSaveUserArgs {
  return &EasyArIdlSaveUserArgs{}
}


func (p *EasyArIdlSaveUserArgs) GetUsername() string {
  return p.Username
}

func (p *EasyArIdlSaveUserArgs) GetEmail() string {
  return p.Email
}

func (p *EasyArIdlSaveUserArgs) GetPassword() string {
  return p.Password
}

func (p *EasyArIdlSaveUserArgs) GetIP() string {
  return p.IP
}

func (p *EasyArIdlSaveUserArgs) GetFromDomain() string {
  return p.FromDomain
}
func (p *EasyArIdlSaveUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlSaveUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *EasyArIdlSaveUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *EasyArIdlSaveUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *EasyArIdlSaveUserArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *EasyArIdlSaveUserArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FromDomain = v
}
  return nil
}

func (p *EasyArIdlSaveUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlSaveUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *EasyArIdlSaveUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *EasyArIdlSaveUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *EasyArIdlSaveUserArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err) }
  return err
}

func (p *EasyArIdlSaveUserArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromDomain", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fromDomain: ", p), err) }
  if err := oprot.WriteString(string(p.FromDomain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromDomain (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fromDomain: ", p), err) }
  return err
}

func (p *EasyArIdlSaveUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlSaveUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlSaveUserResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlSaveUserResult() *EasyArIdlSaveUserResult {
  return &EasyArIdlSaveUserResult{}
}

var EasyArIdlSaveUserResult_Success_DEFAULT int32
func (p *EasyArIdlSaveUserResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return EasyArIdlSaveUserResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlSaveUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlSaveUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlSaveUserResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlSaveUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlSaveUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlSaveUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlSaveUserResult(%+v)", *p)
}

// Attributes:
//  - Code
type EasyArIdlActiveUserArgs struct {
  Code string `thrift:"code,1" db:"code" json:"code"`
}

func NewEasyArIdlActiveUserArgs() *EasyArIdlActiveUserArgs {
  return &EasyArIdlActiveUserArgs{}
}


func (p *EasyArIdlActiveUserArgs) GetCode() string {
  return p.Code
}
func (p *EasyArIdlActiveUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlActiveUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *EasyArIdlActiveUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActiveUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlActiveUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *EasyArIdlActiveUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlActiveUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlActiveUserResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlActiveUserResult() *EasyArIdlActiveUserResult {
  return &EasyArIdlActiveUserResult{}
}

var EasyArIdlActiveUserResult_Success_DEFAULT bool
func (p *EasyArIdlActiveUserResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlActiveUserResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlActiveUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlActiveUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlActiveUserResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlActiveUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActiveUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlActiveUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlActiveUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlActiveUserResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - OldPassword
//  - NewPassword_
type EasyArIdlUpdatePasswordArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  OldPassword string `thrift:"oldPassword,2" db:"oldPassword" json:"oldPassword"`
  NewPassword_ string `thrift:"newPassword,3" db:"newPassword" json:"newPassword"`
}

func NewEasyArIdlUpdatePasswordArgs() *EasyArIdlUpdatePasswordArgs {
  return &EasyArIdlUpdatePasswordArgs{}
}


func (p *EasyArIdlUpdatePasswordArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUpdatePasswordArgs) GetOldPassword() string {
  return p.OldPassword
}

func (p *EasyArIdlUpdatePasswordArgs) GetNewPassword_() string {
  return p.NewPassword_
}
func (p *EasyArIdlUpdatePasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUpdatePasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUpdatePasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OldPassword = v
}
  return nil
}

func (p *EasyArIdlUpdatePasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewPassword_ = v
}
  return nil
}

func (p *EasyArIdlUpdatePasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUpdatePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUpdatePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldPassword", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldPassword: ", p), err) }
  if err := oprot.WriteString(string(p.OldPassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldPassword (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldPassword: ", p), err) }
  return err
}

func (p *EasyArIdlUpdatePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newPassword", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newPassword: ", p), err) }
  if err := oprot.WriteString(string(p.NewPassword_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newPassword (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newPassword: ", p), err) }
  return err
}

func (p *EasyArIdlUpdatePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUpdatePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUpdatePasswordResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUpdatePasswordResult() *EasyArIdlUpdatePasswordResult {
  return &EasyArIdlUpdatePasswordResult{}
}

var EasyArIdlUpdatePasswordResult_Success_DEFAULT bool
func (p *EasyArIdlUpdatePasswordResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUpdatePasswordResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUpdatePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUpdatePasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUpdatePasswordResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUpdatePasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUpdatePasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUpdatePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUpdatePasswordResult(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
//  - IP
type EasyArIdlLoginArgs struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Password string `thrift:"password,2" db:"password" json:"password"`
  IP string `thrift:"ip,3" db:"ip" json:"ip"`
}

func NewEasyArIdlLoginArgs() *EasyArIdlLoginArgs {
  return &EasyArIdlLoginArgs{}
}


func (p *EasyArIdlLoginArgs) GetUsername() string {
  return p.Username
}

func (p *EasyArIdlLoginArgs) GetPassword() string {
  return p.Password
}

func (p *EasyArIdlLoginArgs) GetIP() string {
  return p.IP
}
func (p *EasyArIdlLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *EasyArIdlLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *EasyArIdlLoginArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *EasyArIdlLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *EasyArIdlLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *EasyArIdlLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  return err
}

func (p *EasyArIdlLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlLoginResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlLoginResult() *EasyArIdlLoginResult {
  return &EasyArIdlLoginResult{}
}

var EasyArIdlLoginResult_Success_DEFAULT map[string]string

func (p *EasyArIdlLoginResult) GetSuccess() map[string]string {
  return p.Success
}
func (p *EasyArIdlLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key82 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key82 = v
}
var _val83 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val83 = v
}
    p.Success[_key82] = _val83
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlLoginResult(%+v)", *p)
}

// Attributes:
//  - Email
//  - FromDomain
type EasyArIdlForgotPasswordEmailSendArgs struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  FromDomain string `thrift:"fromDomain,2" db:"fromDomain" json:"fromDomain"`
}

func NewEasyArIdlForgotPasswordEmailSendArgs() *EasyArIdlForgotPasswordEmailSendArgs {
  return &EasyArIdlForgotPasswordEmailSendArgs{}
}


func (p *EasyArIdlForgotPasswordEmailSendArgs) GetEmail() string {
  return p.Email
}

func (p *EasyArIdlForgotPasswordEmailSendArgs) GetFromDomain() string {
  return p.FromDomain
}
func (p *EasyArIdlForgotPasswordEmailSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromDomain = v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ForgotPasswordEmailSend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *EasyArIdlForgotPasswordEmailSendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromDomain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromDomain: ", p), err) }
  if err := oprot.WriteString(string(p.FromDomain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromDomain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromDomain: ", p), err) }
  return err
}

func (p *EasyArIdlForgotPasswordEmailSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlForgotPasswordEmailSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlForgotPasswordEmailSendResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlForgotPasswordEmailSendResult() *EasyArIdlForgotPasswordEmailSendResult {
  return &EasyArIdlForgotPasswordEmailSendResult{}
}

var EasyArIdlForgotPasswordEmailSendResult_Success_DEFAULT bool
func (p *EasyArIdlForgotPasswordEmailSendResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlForgotPasswordEmailSendResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlForgotPasswordEmailSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlForgotPasswordEmailSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ForgotPasswordEmailSend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailSendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlForgotPasswordEmailSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlForgotPasswordEmailSendResult(%+v)", *p)
}

// Attributes:
//  - Code
//  - Password
type EasyArIdlForgotPasswordEmailVerifyArgs struct {
  Code string `thrift:"code,1" db:"code" json:"code"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewEasyArIdlForgotPasswordEmailVerifyArgs() *EasyArIdlForgotPasswordEmailVerifyArgs {
  return &EasyArIdlForgotPasswordEmailVerifyArgs{}
}


func (p *EasyArIdlForgotPasswordEmailVerifyArgs) GetCode() string {
  return p.Code
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs) GetPassword() string {
  return p.Password
}
func (p *EasyArIdlForgotPasswordEmailVerifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ForgotPasswordEmailVerify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *EasyArIdlForgotPasswordEmailVerifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlForgotPasswordEmailVerifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlForgotPasswordEmailVerifyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlForgotPasswordEmailVerifyResult() *EasyArIdlForgotPasswordEmailVerifyResult {
  return &EasyArIdlForgotPasswordEmailVerifyResult{}
}

var EasyArIdlForgotPasswordEmailVerifyResult_Success_DEFAULT bool
func (p *EasyArIdlForgotPasswordEmailVerifyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlForgotPasswordEmailVerifyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlForgotPasswordEmailVerifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ForgotPasswordEmailVerify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlForgotPasswordEmailVerifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlForgotPasswordEmailVerifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlForgotPasswordEmailVerifyResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ServiceId
type EasyArIdlUserHasRightArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ServiceId int8 `thrift:"serviceId,2" db:"serviceId" json:"serviceId"`
}

func NewEasyArIdlUserHasRightArgs() *EasyArIdlUserHasRightArgs {
  return &EasyArIdlUserHasRightArgs{}
}


func (p *EasyArIdlUserHasRightArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserHasRightArgs) GetServiceId() int8 {
  return p.ServiceId
}
func (p *EasyArIdlUserHasRightArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserHasRightArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserHasRightArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.ServiceId = temp
}
  return nil
}

func (p *EasyArIdlUserHasRightArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserHasRight_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserHasRightArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserHasRightArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceId", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceId: ", p), err) }
  if err := oprot.WriteByte(int8(p.ServiceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceId: ", p), err) }
  return err
}

func (p *EasyArIdlUserHasRightArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserHasRightArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserHasRightResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserHasRightResult() *EasyArIdlUserHasRightResult {
  return &EasyArIdlUserHasRightResult{}
}

var EasyArIdlUserHasRightResult_Success_DEFAULT bool
func (p *EasyArIdlUserHasRightResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserHasRightResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserHasRightResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserHasRightResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserHasRightResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserHasRightResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserHasRight_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserHasRightResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserHasRightResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserHasRightResult(%+v)", *p)
}

// Attributes:
//  - Token
type EasyArIdlUserForgotCodeStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
}

func NewEasyArIdlUserForgotCodeStatusArgs() *EasyArIdlUserForgotCodeStatusArgs {
  return &EasyArIdlUserForgotCodeStatusArgs{}
}


func (p *EasyArIdlUserForgotCodeStatusArgs) GetToken() string {
  return p.Token
}
func (p *EasyArIdlUserForgotCodeStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserForgotCodeStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserForgotCodeStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserForgotCodeStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserForgotCodeStatusResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserForgotCodeStatusResult() *EasyArIdlUserForgotCodeStatusResult {
  return &EasyArIdlUserForgotCodeStatusResult{}
}

var EasyArIdlUserForgotCodeStatusResult_Success_DEFAULT bool
func (p *EasyArIdlUserForgotCodeStatusResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserForgotCodeStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserForgotCodeStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserForgotCodeStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserForgotCodeStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserForgotCodeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserForgotCodeStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserForgotCodeStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - FromDomain
type EasyArIdlUserForgotCodeResendArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  FromDomain string `thrift:"fromDomain,2" db:"fromDomain" json:"fromDomain"`
}

func NewEasyArIdlUserForgotCodeResendArgs() *EasyArIdlUserForgotCodeResendArgs {
  return &EasyArIdlUserForgotCodeResendArgs{}
}


func (p *EasyArIdlUserForgotCodeResendArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserForgotCodeResendArgs) GetFromDomain() string {
  return p.FromDomain
}
func (p *EasyArIdlUserForgotCodeResendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserForgotCodeResendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserForgotCodeResendArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromDomain = v
}
  return nil
}

func (p *EasyArIdlUserForgotCodeResendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserForgotCodeResend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserForgotCodeResendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserForgotCodeResendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromDomain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromDomain: ", p), err) }
  if err := oprot.WriteString(string(p.FromDomain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromDomain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromDomain: ", p), err) }
  return err
}

func (p *EasyArIdlUserForgotCodeResendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserForgotCodeResendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserForgotCodeResendResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserForgotCodeResendResult() *EasyArIdlUserForgotCodeResendResult {
  return &EasyArIdlUserForgotCodeResendResult{}
}

var EasyArIdlUserForgotCodeResendResult_Success_DEFAULT bool
func (p *EasyArIdlUserForgotCodeResendResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserForgotCodeResendResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserForgotCodeResendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserForgotCodeResendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserForgotCodeResendResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserForgotCodeResendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserForgotCodeResend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserForgotCodeResendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserForgotCodeResendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserForgotCodeResendResult(%+v)", *p)
}

// Attributes:
//  - Code
//  - FromDomain
type EasyArIdlUserRegisterEmailResendArgs struct {
  Code string `thrift:"code,1" db:"code" json:"code"`
  FromDomain string `thrift:"fromDomain,2" db:"fromDomain" json:"fromDomain"`
}

func NewEasyArIdlUserRegisterEmailResendArgs() *EasyArIdlUserRegisterEmailResendArgs {
  return &EasyArIdlUserRegisterEmailResendArgs{}
}


func (p *EasyArIdlUserRegisterEmailResendArgs) GetCode() string {
  return p.Code
}

func (p *EasyArIdlUserRegisterEmailResendArgs) GetFromDomain() string {
  return p.FromDomain
}
func (p *EasyArIdlUserRegisterEmailResendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromDomain = v
}
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRegisterEmailResend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *EasyArIdlUserRegisterEmailResendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromDomain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromDomain: ", p), err) }
  if err := oprot.WriteString(string(p.FromDomain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromDomain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromDomain: ", p), err) }
  return err
}

func (p *EasyArIdlUserRegisterEmailResendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRegisterEmailResendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserRegisterEmailResendResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserRegisterEmailResendResult() *EasyArIdlUserRegisterEmailResendResult {
  return &EasyArIdlUserRegisterEmailResendResult{}
}

var EasyArIdlUserRegisterEmailResendResult_Success_DEFAULT bool
func (p *EasyArIdlUserRegisterEmailResendResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserRegisterEmailResendResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserRegisterEmailResendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserRegisterEmailResendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRegisterEmailResend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRegisterEmailResendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserRegisterEmailResendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRegisterEmailResendResult(%+v)", *p)
}

// Attributes:
//  - Token
type EasyArIdlUserBindedMobileArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
}

func NewEasyArIdlUserBindedMobileArgs() *EasyArIdlUserBindedMobileArgs {
  return &EasyArIdlUserBindedMobileArgs{}
}


func (p *EasyArIdlUserBindedMobileArgs) GetToken() string {
  return p.Token
}
func (p *EasyArIdlUserBindedMobileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindedMobileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserBindedMobileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindedMobile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindedMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindedMobileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindedMobileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserBindedMobileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserBindedMobileResult() *EasyArIdlUserBindedMobileResult {
  return &EasyArIdlUserBindedMobileResult{}
}

var EasyArIdlUserBindedMobileResult_Success_DEFAULT string
func (p *EasyArIdlUserBindedMobileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EasyArIdlUserBindedMobileResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserBindedMobileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserBindedMobileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindedMobileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserBindedMobileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindedMobile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindedMobileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserBindedMobileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindedMobileResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Mobile
//  - Lang
type EasyArIdlUserBindMobileSendCodeArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Lang string `thrift:"lang,3" db:"lang" json:"lang"`
}

func NewEasyArIdlUserBindMobileSendCodeArgs() *EasyArIdlUserBindMobileSendCodeArgs {
  return &EasyArIdlUserBindMobileSendCodeArgs{}
}


func (p *EasyArIdlUserBindMobileSendCodeArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) GetMobile() string {
  return p.Mobile
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) GetLang() string {
  return p.Lang
}
func (p *EasyArIdlUserBindMobileSendCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindMobileSendCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileSendCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindMobileSendCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserBindMobileSendCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserBindMobileSendCodeResult() *EasyArIdlUserBindMobileSendCodeResult {
  return &EasyArIdlUserBindMobileSendCodeResult{}
}

var EasyArIdlUserBindMobileSendCodeResult_Success_DEFAULT bool
func (p *EasyArIdlUserBindMobileSendCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserBindMobileSendCodeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserBindMobileSendCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserBindMobileSendCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindMobileSendCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindMobileSendCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserBindMobileSendCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindMobileSendCodeResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Mobile
//  - Code
type EasyArIdlUserBindMobileUpdateArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Code string `thrift:"code,3" db:"code" json:"code"`
}

func NewEasyArIdlUserBindMobileUpdateArgs() *EasyArIdlUserBindMobileUpdateArgs {
  return &EasyArIdlUserBindMobileUpdateArgs{}
}


func (p *EasyArIdlUserBindMobileUpdateArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserBindMobileUpdateArgs) GetMobile() string {
  return p.Mobile
}

func (p *EasyArIdlUserBindMobileUpdateArgs) GetCode() string {
  return p.Code
}
func (p *EasyArIdlUserBindMobileUpdateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindMobileUpdate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileUpdateArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindMobileUpdateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindMobileUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserBindMobileUpdateResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserBindMobileUpdateResult() *EasyArIdlUserBindMobileUpdateResult {
  return &EasyArIdlUserBindMobileUpdateResult{}
}

var EasyArIdlUserBindMobileUpdateResult_Success_DEFAULT bool
func (p *EasyArIdlUserBindMobileUpdateResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserBindMobileUpdateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserBindMobileUpdateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserBindMobileUpdateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindMobileUpdate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindMobileUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserBindMobileUpdateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindMobileUpdateResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Email
//  - FromDomain
type EasyArIdlUserBindEmailArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  FromDomain string `thrift:"fromDomain,3" db:"fromDomain" json:"fromDomain"`
}

func NewEasyArIdlUserBindEmailArgs() *EasyArIdlUserBindEmailArgs {
  return &EasyArIdlUserBindEmailArgs{}
}


func (p *EasyArIdlUserBindEmailArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserBindEmailArgs) GetEmail() string {
  return p.Email
}

func (p *EasyArIdlUserBindEmailArgs) GetFromDomain() string {
  return p.FromDomain
}
func (p *EasyArIdlUserBindEmailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindEmailArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserBindEmailArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *EasyArIdlUserBindEmailArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FromDomain = v
}
  return nil
}

func (p *EasyArIdlUserBindEmailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindEmail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindEmailArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromDomain", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromDomain: ", p), err) }
  if err := oprot.WriteString(string(p.FromDomain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromDomain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromDomain: ", p), err) }
  return err
}

func (p *EasyArIdlUserBindEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserBindEmailResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserBindEmailResult() *EasyArIdlUserBindEmailResult {
  return &EasyArIdlUserBindEmailResult{}
}

var EasyArIdlUserBindEmailResult_Success_DEFAULT bool
func (p *EasyArIdlUserBindEmailResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserBindEmailResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserBindEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserBindEmailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserBindEmailResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserBindEmailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserBindEmail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserBindEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserBindEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserBindEmailResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Params
type EasyArIdlUserApplyServiceArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Params map[string]string `thrift:"params,2" db:"params" json:"params"`
}

func NewEasyArIdlUserApplyServiceArgs() *EasyArIdlUserApplyServiceArgs {
  return &EasyArIdlUserApplyServiceArgs{}
}


func (p *EasyArIdlUserApplyServiceArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserApplyServiceArgs) GetParams() map[string]string {
  return p.Params
}
func (p *EasyArIdlUserApplyServiceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserApplyServiceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserApplyServiceArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key84 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key84 = v
}
var _val85 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val85 = v
}
    p.Params[_key84] = _val85
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlUserApplyServiceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserApplyService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserApplyServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserApplyServiceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *EasyArIdlUserApplyServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserApplyServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserApplyServiceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserApplyServiceResult() *EasyArIdlUserApplyServiceResult {
  return &EasyArIdlUserApplyServiceResult{}
}

var EasyArIdlUserApplyServiceResult_Success_DEFAULT bool
func (p *EasyArIdlUserApplyServiceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserApplyServiceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserApplyServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserApplyServiceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserApplyServiceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserApplyServiceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserApplyService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserApplyServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserApplyServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserApplyServiceResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ServiceType
type EasyArIdlUserRightCreateActionArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ServiceType int8 `thrift:"serviceType,2" db:"serviceType" json:"serviceType"`
}

func NewEasyArIdlUserRightCreateActionArgs() *EasyArIdlUserRightCreateActionArgs {
  return &EasyArIdlUserRightCreateActionArgs{}
}


func (p *EasyArIdlUserRightCreateActionArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserRightCreateActionArgs) GetServiceType() int8 {
  return p.ServiceType
}
func (p *EasyArIdlUserRightCreateActionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRightCreateActionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserRightCreateActionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.ServiceType = temp
}
  return nil
}

func (p *EasyArIdlUserRightCreateActionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRightCreateAction_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRightCreateActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserRightCreateActionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceType: ", p), err) }
  if err := oprot.WriteByte(int8(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceType: ", p), err) }
  return err
}

func (p *EasyArIdlUserRightCreateActionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRightCreateActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserRightCreateActionResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserRightCreateActionResult() *EasyArIdlUserRightCreateActionResult {
  return &EasyArIdlUserRightCreateActionResult{}
}

var EasyArIdlUserRightCreateActionResult_Success_DEFAULT bool
func (p *EasyArIdlUserRightCreateActionResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserRightCreateActionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserRightCreateActionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserRightCreateActionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRightCreateActionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserRightCreateActionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRightCreateAction_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRightCreateActionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserRightCreateActionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRightCreateActionResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ServiceType
type EasyArIdlUserRightOwnedActionArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ServiceType int8 `thrift:"serviceType,2" db:"serviceType" json:"serviceType"`
}

func NewEasyArIdlUserRightOwnedActionArgs() *EasyArIdlUserRightOwnedActionArgs {
  return &EasyArIdlUserRightOwnedActionArgs{}
}


func (p *EasyArIdlUserRightOwnedActionArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUserRightOwnedActionArgs) GetServiceType() int8 {
  return p.ServiceType
}
func (p *EasyArIdlUserRightOwnedActionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRightOwnedActionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUserRightOwnedActionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.ServiceType = temp
}
  return nil
}

func (p *EasyArIdlUserRightOwnedActionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRightOwnedAction_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRightOwnedActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUserRightOwnedActionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceType: ", p), err) }
  if err := oprot.WriteByte(int8(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceType: ", p), err) }
  return err
}

func (p *EasyArIdlUserRightOwnedActionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRightOwnedActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUserRightOwnedActionResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUserRightOwnedActionResult() *EasyArIdlUserRightOwnedActionResult {
  return &EasyArIdlUserRightOwnedActionResult{}
}

var EasyArIdlUserRightOwnedActionResult_Success_DEFAULT bool
func (p *EasyArIdlUserRightOwnedActionResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUserRightOwnedActionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUserRightOwnedActionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUserRightOwnedActionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUserRightOwnedActionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUserRightOwnedActionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRightOwnedAction_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUserRightOwnedActionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUserRightOwnedActionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUserRightOwnedActionResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Params
type EasyArIdlOrderInfoSaveArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Params map[string]string `thrift:"params,2" db:"params" json:"params"`
}

func NewEasyArIdlOrderInfoSaveArgs() *EasyArIdlOrderInfoSaveArgs {
  return &EasyArIdlOrderInfoSaveArgs{}
}


func (p *EasyArIdlOrderInfoSaveArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlOrderInfoSaveArgs) GetParams() map[string]string {
  return p.Params
}
func (p *EasyArIdlOrderInfoSaveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoSaveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlOrderInfoSaveArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key86 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key86 = v
}
var _val87 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val87 = v
}
    p.Params[_key86] = _val87
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoSaveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoSave_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoSaveArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoSaveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoSaveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlOrderInfoSaveResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlOrderInfoSaveResult() *EasyArIdlOrderInfoSaveResult {
  return &EasyArIdlOrderInfoSaveResult{}
}

var EasyArIdlOrderInfoSaveResult_Success_DEFAULT string
func (p *EasyArIdlOrderInfoSaveResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EasyArIdlOrderInfoSaveResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlOrderInfoSaveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlOrderInfoSaveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoSaveResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlOrderInfoSaveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoSave_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlOrderInfoSaveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoSaveResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - OrderId
//  - Params
type EasyArIdlOrderInfoFormArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  OrderId string `thrift:"orderId,2" db:"orderId" json:"orderId"`
  Params map[string]string `thrift:"params,3" db:"params" json:"params"`
}

func NewEasyArIdlOrderInfoFormArgs() *EasyArIdlOrderInfoFormArgs {
  return &EasyArIdlOrderInfoFormArgs{}
}


func (p *EasyArIdlOrderInfoFormArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlOrderInfoFormArgs) GetOrderId() string {
  return p.OrderId
}

func (p *EasyArIdlOrderInfoFormArgs) GetParams() map[string]string {
  return p.Params
}
func (p *EasyArIdlOrderInfoFormArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoFormArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlOrderInfoFormArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *EasyArIdlOrderInfoFormArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key88 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key88 = v
}
var _val89 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val89 = v
}
    p.Params[_key88] = _val89
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoFormArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoForm_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoFormArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoFormArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoFormArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoFormArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoFormArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlOrderInfoFormResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlOrderInfoFormResult() *EasyArIdlOrderInfoFormResult {
  return &EasyArIdlOrderInfoFormResult{}
}

var EasyArIdlOrderInfoFormResult_Success_DEFAULT map[string]string

func (p *EasyArIdlOrderInfoFormResult) GetSuccess() map[string]string {
  return p.Success
}
func (p *EasyArIdlOrderInfoFormResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlOrderInfoFormResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoFormResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key90 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key90 = v
}
var _val91 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val91 = v
}
    p.Success[_key90] = _val91
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoFormResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoForm_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoFormResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlOrderInfoFormResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoFormResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - OrderId
type EasyArIdlOrderInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  OrderId string `thrift:"orderId,2" db:"orderId" json:"orderId"`
}

func NewEasyArIdlOrderInfoArgs() *EasyArIdlOrderInfoArgs {
  return &EasyArIdlOrderInfoArgs{}
}


func (p *EasyArIdlOrderInfoArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlOrderInfoArgs) GetOrderId() string {
  return p.OrderId
}
func (p *EasyArIdlOrderInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlOrderInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *EasyArIdlOrderInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlOrderInfoResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlOrderInfoResult() *EasyArIdlOrderInfoResult {
  return &EasyArIdlOrderInfoResult{}
}

var EasyArIdlOrderInfoResult_Success_DEFAULT map[string]string

func (p *EasyArIdlOrderInfoResult) GetSuccess() map[string]string {
  return p.Success
}
func (p *EasyArIdlOrderInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlOrderInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key92 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key92 = v
}
var _val93 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val93 = v
}
    p.Success[_key92] = _val93
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlOrderInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - OrderId
type EasyArIdlOrderInfoBalancePayArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  OrderId string `thrift:"orderId,2" db:"orderId" json:"orderId"`
}

func NewEasyArIdlOrderInfoBalancePayArgs() *EasyArIdlOrderInfoBalancePayArgs {
  return &EasyArIdlOrderInfoBalancePayArgs{}
}


func (p *EasyArIdlOrderInfoBalancePayArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlOrderInfoBalancePayArgs) GetOrderId() string {
  return p.OrderId
}
func (p *EasyArIdlOrderInfoBalancePayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoBalancePay_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoBalancePayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err) }
  return err
}

func (p *EasyArIdlOrderInfoBalancePayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoBalancePayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlOrderInfoBalancePayResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlOrderInfoBalancePayResult() *EasyArIdlOrderInfoBalancePayResult {
  return &EasyArIdlOrderInfoBalancePayResult{}
}

var EasyArIdlOrderInfoBalancePayResult_Success_DEFAULT bool
func (p *EasyArIdlOrderInfoBalancePayResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlOrderInfoBalancePayResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlOrderInfoBalancePayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlOrderInfoBalancePayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderInfoBalancePay_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlOrderInfoBalancePayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlOrderInfoBalancePayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlOrderInfoBalancePayResult(%+v)", *p)
}

// Attributes:
//  - PayProvider
//  - Params
type EasyArIdlPayCallbackVerifyArgs struct {
  PayProvider int8 `thrift:"payProvider,1" db:"payProvider" json:"payProvider"`
  Params map[string]string `thrift:"params,2" db:"params" json:"params"`
}

func NewEasyArIdlPayCallbackVerifyArgs() *EasyArIdlPayCallbackVerifyArgs {
  return &EasyArIdlPayCallbackVerifyArgs{}
}


func (p *EasyArIdlPayCallbackVerifyArgs) GetPayProvider() int8 {
  return p.PayProvider
}

func (p *EasyArIdlPayCallbackVerifyArgs) GetParams() map[string]string {
  return p.Params
}
func (p *EasyArIdlPayCallbackVerifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlPayCallbackVerifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.PayProvider = temp
}
  return nil
}

func (p *EasyArIdlPayCallbackVerifyArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key94 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key94 = v
}
var _val95 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val95 = v
}
    p.Params[_key94] = _val95
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EasyArIdlPayCallbackVerifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PayCallbackVerify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlPayCallbackVerifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payProvider", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:payProvider: ", p), err) }
  if err := oprot.WriteByte(int8(p.PayProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payProvider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:payProvider: ", p), err) }
  return err
}

func (p *EasyArIdlPayCallbackVerifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *EasyArIdlPayCallbackVerifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlPayCallbackVerifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlPayCallbackVerifyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlPayCallbackVerifyResult() *EasyArIdlPayCallbackVerifyResult {
  return &EasyArIdlPayCallbackVerifyResult{}
}

var EasyArIdlPayCallbackVerifyResult_Success_DEFAULT bool
func (p *EasyArIdlPayCallbackVerifyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlPayCallbackVerifyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlPayCallbackVerifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlPayCallbackVerifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlPayCallbackVerifyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlPayCallbackVerifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PayCallbackVerify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlPayCallbackVerifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlPayCallbackVerifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlPayCallbackVerifyResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - AppId
type EasyArIdlAppInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  AppId int64 `thrift:"appId,2" db:"appId" json:"appId"`
}

func NewEasyArIdlAppInfoArgs() *EasyArIdlAppInfoArgs {
  return &EasyArIdlAppInfoArgs{}
}


func (p *EasyArIdlAppInfoArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlAppInfoArgs) GetAppId() int64 {
  return p.AppId
}
func (p *EasyArIdlAppInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlAppInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *EasyArIdlAppInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlAppInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *EasyArIdlAppInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlAppInfoResult struct {
  Success *AppItemInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlAppInfoResult() *EasyArIdlAppInfoResult {
  return &EasyArIdlAppInfoResult{}
}

var EasyArIdlAppInfoResult_Success_DEFAULT *AppItemInfo
func (p *EasyArIdlAppInfoResult) GetSuccess() *AppItemInfo {
  if !p.IsSetSuccess() {
    return EasyArIdlAppInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *EasyArIdlAppInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlAppInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AppItemInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EasyArIdlAppInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlAppInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - AppId
type EasyArIdlAppDeleteArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  AppId int64 `thrift:"appId,2" db:"appId" json:"appId"`
}

func NewEasyArIdlAppDeleteArgs() *EasyArIdlAppDeleteArgs {
  return &EasyArIdlAppDeleteArgs{}
}


func (p *EasyArIdlAppDeleteArgs) GetToken() string {
  return p.Token
}

func (p *EasyArIdlAppDeleteArgs) GetAppId() int64 {
  return p.AppId
}
func (p *EasyArIdlAppDeleteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppDeleteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlAppDeleteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *EasyArIdlAppDeleteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppDelete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlAppDeleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *EasyArIdlAppDeleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlAppDeleteResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlAppDeleteResult() *EasyArIdlAppDeleteResult {
  return &EasyArIdlAppDeleteResult{}
}

var EasyArIdlAppDeleteResult_Success_DEFAULT bool
func (p *EasyArIdlAppDeleteResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlAppDeleteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlAppDeleteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlAppDeleteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppDeleteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlAppDeleteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppDelete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlAppDeleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppDeleteResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Page
//  - Size
//  - AppType
type EasyArIdlAppListV3Args struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  AppType int8 `thrift:"appType,4" db:"appType" json:"appType"`
}

func NewEasyArIdlAppListV3Args() *EasyArIdlAppListV3Args {
  return &EasyArIdlAppListV3Args{}
}


func (p *EasyArIdlAppListV3Args) GetToken() string {
  return p.Token
}

func (p *EasyArIdlAppListV3Args) GetPage() int32 {
  return p.Page
}

func (p *EasyArIdlAppListV3Args) GetSize() int32 {
  return p.Size
}

func (p *EasyArIdlAppListV3Args) GetAppType() int8 {
  return p.AppType
}
func (p *EasyArIdlAppListV3Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppListV3Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlAppListV3Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *EasyArIdlAppListV3Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *EasyArIdlAppListV3Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.AppType = temp
}
  return nil
}

func (p *EasyArIdlAppListV3Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppListV3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppListV3Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlAppListV3Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *EasyArIdlAppListV3Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *EasyArIdlAppListV3Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appType", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appType: ", p), err) }
  if err := oprot.WriteByte(int8(p.AppType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appType: ", p), err) }
  return err
}

func (p *EasyArIdlAppListV3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppListV3Args(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlAppListV3Result struct {
  Success *ItemList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlAppListV3Result() *EasyArIdlAppListV3Result {
  return &EasyArIdlAppListV3Result{}
}

var EasyArIdlAppListV3Result_Success_DEFAULT *ItemList
func (p *EasyArIdlAppListV3Result) GetSuccess() *ItemList {
  if !p.IsSetSuccess() {
    return EasyArIdlAppListV3Result_Success_DEFAULT
  }
return p.Success
}
func (p *EasyArIdlAppListV3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlAppListV3Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlAppListV3Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ItemList{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EasyArIdlAppListV3Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppListV3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlAppListV3Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlAppListV3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlAppListV3Result(%+v)", *p)
}

// Attributes:
//  - Token
//  - AppId
type EasyArIdlUpgradeToV3Args struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  AppId int64 `thrift:"appId,2" db:"appId" json:"appId"`
}

func NewEasyArIdlUpgradeToV3Args() *EasyArIdlUpgradeToV3Args {
  return &EasyArIdlUpgradeToV3Args{}
}


func (p *EasyArIdlUpgradeToV3Args) GetToken() string {
  return p.Token
}

func (p *EasyArIdlUpgradeToV3Args) GetAppId() int64 {
  return p.AppId
}
func (p *EasyArIdlUpgradeToV3Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUpgradeToV3Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *EasyArIdlUpgradeToV3Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *EasyArIdlUpgradeToV3Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpgradeToV3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUpgradeToV3Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *EasyArIdlUpgradeToV3Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *EasyArIdlUpgradeToV3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUpgradeToV3Args(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlUpgradeToV3Result struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlUpgradeToV3Result() *EasyArIdlUpgradeToV3Result {
  return &EasyArIdlUpgradeToV3Result{}
}

var EasyArIdlUpgradeToV3Result_Success_DEFAULT bool
func (p *EasyArIdlUpgradeToV3Result) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return EasyArIdlUpgradeToV3Result_Success_DEFAULT
  }
return *p.Success
}
func (p *EasyArIdlUpgradeToV3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlUpgradeToV3Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlUpgradeToV3Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EasyArIdlUpgradeToV3Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpgradeToV3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlUpgradeToV3Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlUpgradeToV3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlUpgradeToV3Result(%+v)", *p)
}

// Attributes:
//  - RequestInfo
type EasyArIdlSendRequestArgs struct {
  RequestInfo *RequestInfo `thrift:"requestInfo,1" db:"requestInfo" json:"requestInfo"`
}

func NewEasyArIdlSendRequestArgs() *EasyArIdlSendRequestArgs {
  return &EasyArIdlSendRequestArgs{}
}

var EasyArIdlSendRequestArgs_RequestInfo_DEFAULT *RequestInfo
func (p *EasyArIdlSendRequestArgs) GetRequestInfo() *RequestInfo {
  if !p.IsSetRequestInfo() {
    return EasyArIdlSendRequestArgs_RequestInfo_DEFAULT
  }
return p.RequestInfo
}
func (p *EasyArIdlSendRequestArgs) IsSetRequestInfo() bool {
  return p.RequestInfo != nil
}

func (p *EasyArIdlSendRequestArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlSendRequestArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestInfo = &RequestInfo{}
  if err := p.RequestInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestInfo), err)
  }
  return nil
}

func (p *EasyArIdlSendRequestArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlSendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestInfo: ", p), err) }
  if err := p.RequestInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestInfo: ", p), err) }
  return err
}

func (p *EasyArIdlSendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlSendRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EasyArIdlSendRequestResult struct {
  Success *ResponesReuslt `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEasyArIdlSendRequestResult() *EasyArIdlSendRequestResult {
  return &EasyArIdlSendRequestResult{}
}

var EasyArIdlSendRequestResult_Success_DEFAULT *ResponesReuslt
func (p *EasyArIdlSendRequestResult) GetSuccess() *ResponesReuslt {
  if !p.IsSetSuccess() {
    return EasyArIdlSendRequestResult_Success_DEFAULT
  }
return p.Success
}
func (p *EasyArIdlSendRequestResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EasyArIdlSendRequestResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EasyArIdlSendRequestResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResponesReuslt{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EasyArIdlSendRequestResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EasyArIdlSendRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EasyArIdlSendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EasyArIdlSendRequestResult(%+v)", *p)
}


